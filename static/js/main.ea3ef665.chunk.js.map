{"version":3,"sources":["component/clientForm.js","utils/phoneNumberGenerator.js","App.js","serviceWorker.js","index.js"],"names":["CompanyNameForm","handleSubmit","e","preventDefault","_this","props","form","validateFields","err","values","onSubmit","this","fieldsError","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","companyNameError","isFieldTouched","react_default","a","createElement","es_form","className","layout","Item","validateStatus","help","rules","required","message","input","placeholder","es_button","htmlType","disabled","Object","keys","some","field","Component","WrappedCompanyNameForm","Form","create","name","generatePhoneNumbers","numberOfPhoneNumbers","telNumbers","i","push","Math","floor","random","sortNumbers","numbers","type","sort","b","Panel","Collapse","App","state","generatedNumbers","amountToGenerate","totalGenerated","minMax","minMaxValue","companyName","generateNumbers","setState","prevState","nextState","updateLocalStore","localStorage","setItem","JSON","stringify","length","sortedNumbers","getMinMax","maxNum","max","apply","toConsumableArray","minNum","min","clearMinMax","handleFormSubmission","resetGenerator","numGenerated","getItem","parseInt","parse","_this2","_this$state","collapse","defaultActiveKey","onChange","onClickCollapseHeader","expandIconPosition","header","key","extra","icon","onClick","event","numbersToDownload","map","number","concat","blob","Blob","FileSaver","saveAs","stopPropagation","tag","color","closable","onClose","renderNumbers","_this3","_this$state2","clientForm","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea3ef665.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Form, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport '../App.css';\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass CompanyNameForm extends Component {\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.props.onSubmit(values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    const companyNameError = isFieldTouched('companyName') && getFieldError('companyName');\n    return (\n      <Form className=\"client-form\" layout=\"inline\" onSubmit={this.handleSubmit}>\n        <Form.Item className=\"client-input\" validateStatus={companyNameError ? 'error' : ''} help={companyNameError || ''}>\n          {getFieldDecorator('companyName', {\n            rules: [{ required: true, message: \"Please input the client's name\" }],\n          })(\n            <Input\n              placeholder=\"Client name\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button className=\"submit-btn\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n            Generate\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedCompanyNameForm = Form.create({ name: 'company_name' })(CompanyNameForm);\n\nexport default WrappedCompanyNameForm;","const randomPhoneNumber = () => {\n  return Math.floor(Math.random() * 100000000) + 800000000;\n};\n\nexport const generatePhoneNumbers = (numberOfPhoneNumbers) => {\n  const telNumbers = [];\n  for (let i = 0; i < numberOfPhoneNumbers; i++){\n    telNumbers.push(randomPhoneNumber());\n  }\n  return telNumbers;\n};\n\nexport const sortNumbers = (numbers, type) => {\n  const  sortFunction = (a, b) => {\n    if( type === 'desc'){\n      if (a < b) return 1;\n      if (a > b) return -1;\n    }\n    else if (type === 'asc'){\n      if (a < b) return -1;\n      if (a > b) return 1;\n    }\n  };\n  return numbers.sort(sortFunction);\n};\n","import React, { Component } from 'react';\nimport { Collapse, Icon, Tag } from 'antd';\nimport FileSaver from 'file-saver';\nimport ClientForm from './component/clientForm';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nimport { generatePhoneNumbers, sortNumbers } from \"./utils/phoneNumberGenerator\";\nconst { Panel } = Collapse;\n\nclass App extends Component {\n  state = {\n    generatedNumbers: [],\n    amountToGenerate: 50,\n    totalGenerated: 0,\n    minMax: '',\n    minMaxValue: null,\n    companyName: \"\",\n  }\n\n  componentDidMount() {\n    const numGenerated = localStorage.getItem('phoneGenerator');\n    if (numGenerated) {\n      const totalGenerated = parseInt(JSON.parse(numGenerated), 10);\n      this.setState({ totalGenerated: totalGenerated });\n    } else {\n      this.setState({ totalGenerated: 0 });\n    }\n  }\n\n  generateNumbers = () => {\n    const { amountToGenerate } = this.state;\n    const generatedNumbers = generatePhoneNumbers(amountToGenerate);\n    this.setState((prevState, nextState) => {\n      return {\n        totalGenerated: prevState.totalGenerated + 50,\n        generatedNumbers\n      }\n    }, this.updateLocalStore);\n  }\n\n  updateLocalStore = () => {\n    const { totalGenerated } = this.state;\n    localStorage.setItem('phoneGenerator', JSON.stringify(totalGenerated));\n  }\n\n  sortNumbers = (type) => {\n    const { generatedNumbers } = this.state;\n    if (generatedNumbers.length) {\n      const sortedNumbers = sortNumbers(generatedNumbers, type);\n      this.setState({ generatedNumbers: sortedNumbers });\n    }\n  }\n\n  getMinMax = (type) => {\n    const { generatedNumbers } = this.state;\n    if (type === 'Max') {\n      const maxNum = Math.max(...generatedNumbers);\n      this.setState({\n        minMax: 'Max',\n        minMaxValue: maxNum,\n      });\n    }\n    else if (type === 'Min') {\n      const minNum = Math.min(...generatedNumbers);\n      this.setState({\n        minMax: 'Min',\n        minMaxValue: minNum,\n      });\n    }\n  }\n\n  clearMinMax = () => {\n    this.setState({\n      minMax: '',\n      minMaxValue: null,\n    });\n  }\n\n  generatedNumbers() {\n    const { minMax, minMaxValue, companyName, generatedNumbers } = this.state;\n    const genExtra = () => (\n      <Icon\n        type=\"download\"\n        className=\"control-items\"\n        onClick={event => {\n          const numbersToDownload = generatedNumbers.map(number => `0${number} \\n`);\n          var blob = new Blob(numbersToDownload, { type: \"text/plain;charset=utf-8\" });\n          FileSaver.saveAs(blob, `${companyName}.txt`);\n          event.stopPropagation();\n        }}\n      />\n    );\n\n    const upArrow = () => (\n      <Icon\n        type=\"arrow-up\"\n        onClick={event => {\n          this.sortNumbers('asc');\n          event.stopPropagation();\n        }}\n      />\n    );\n\n    const downArrow = () => (\n      <Icon\n        type=\"arrow-down\"\n        onClick={event => {\n          this.sortNumbers('desc');\n          event.stopPropagation();\n        }}\n      />\n    );\n\n    return (\n      <div>\n        <Collapse\n          defaultActiveKey={['1']}\n          onChange={this.onClickCollapseHeader}\n          expandIconPosition=\"left\"\n        >\n          <Panel header={companyName} key=\"1\" extra={genExtra()}>\n            <div className=\"nums-controls\">\n              <div className='max-btn'>\n                <Tag className='minmax-tag' onClick={() => this.getMinMax('Max')} color={minMax === 'Max' && '#30021E'}>Max</Tag>\n                <Tag className='minmax-tag' onClick={() => this.getMinMax('Min')} color={minMax === 'Min' && '#30021E'}>Min</Tag>\n                {minMaxValue && <Tag closable onClose={this.clearMinMax}>{'0' + minMaxValue}</Tag>}\n              </div>\n              <div>\n                <span className=\"control-items\">Sort:</span>\n                <span className=\"control-items\">{upArrow()}</span>\n                <span className=\"control-items\">{downArrow()}</span>\n              </div>\n            </div>\n            <div className=\"nums-container\">\n              {this.renderNumbers()}\n            </div>\n          </Panel>\n        </Collapse>\n      </div>\n    );\n  }\n\n  renderNumbers() {\n    const { generatedNumbers } = this.state;\n    return generatedNumbers.map(number => <Tag className='num' key={number}>{\"0\" + number}</Tag>);\n  }\n\n  handleFormSubmission = (values) => {\n    const { companyName } = values;\n    this.setState({ companyName }, this.generateNumbers);\n  }\n\n  resetGenerator = () => {\n    this.setState({\n      generatedNumbers: [],\n      minMax: '',\n      minMaxValue: null,\n      companyName: \"\",\n    });\n  }\n\n  render() {\n    const { totalGenerated, generatedNumbers } = this.state;\n\n    return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <header className=\"app-header\">\n            <p className=\"app-title\">\n              Phone Number Generator\n          </p>\n          </header>\n          <main>\n            <section className=\"stat-section\">\n              <p className=\"stat-text\">Phone numbers generated to date: {totalGenerated}</p>\n            </section>\n            {!generatedNumbers.length ?\n              (\n                <section>\n                  <ClientForm onSubmit={this.handleFormSubmission} />\n                </section>\n              ) :\n              (\n                <section className=\"number-section\">\n                  {this.generatedNumbers()}\n                </section>\n              )\n            }\n          </main>\n        </div>\n        <section className=\"reset-section\">\n          {generatedNumbers.length > 0 &&\n            <React.Fragment>\n              <Icon onClick={() => this.resetGenerator()} className=\"reset-icon\" type=\"reload\" />\n              <p className=\"reset-text\">Reset</p>\n            </React.Fragment>\n          }\n        </section>\n        <footer>\n          <p>&copy;2019 LMS Output</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}